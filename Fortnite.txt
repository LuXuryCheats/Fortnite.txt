// lol this source was made in notepad in class unknown if it has a single error. no esp or offsets its just a menu
// not even hooked to the game lol.
// probably like thousands of errors LOL

namespace Settings
{
    bool Aimbot = true;
    float Smooth = 2.f;
    bool Skeleton = false;
    bool Corner_Box_ESP = true;
    bool FOVSquare = false;
    float Size_Circle = 400.f;
}

std::string string_To_UTF8(const std::string & str)
{
	int nwLen = ::MultiByteToWideChar(CP_ACP, 0, str.c_str(), -1, NULL, 0);

	wchar_t * pwBuf = new wchar_t[nwLen + 1];
	ZeroMemory(pwBuf, nwLen * 2 + 2);

	::MultiByteToWideChar(CP_ACP, 0, str.c_str(), str.length(), pwBuf, nwLen);

	int nLen = ::WideCharToMultiByte(CP_UTF8, 0, pwBuf, -1, NULL, NULL, NULL, NULL);

	char * pBuf = new char[nLen + 1];
	ZeroMemory(pBuf, nLen + 1);

	::WideCharToMultiByte(CP_UTF8, 0, pwBuf, nwLen, pBuf, nLen, NULL, NULL);

	std::string retStr(pBuf);

	delete[]pwBuf;
	delete[]pBuf;

	pwBuf = NULL;
	pBuf = NULL;

	return retStr;
}

void DrawRect(int x, int y, int w, int h, RGBA *color, int thickness)
{
	ImGui::GetOverlayDrawList()->AddRect(ImVec2(x, y), ImVec2(x + w, y + h), ImGui::ColorConvertFloat4ToU32(ImVec4(color->R / 255.0, color->G / 255.0, color->B / 255.0, color->A / 255.0)), 0, 0, thickness);
}

typedef struct 
{
	DWORD R;
	DWORD G;
	DWORD B;
	DWORD A;
}RGBA;

class Color
{
public:
	RGBA red = { 255,0,0,255 };
	RGBA Magenta = { 255,0,255,255 };
	RGBA yellow = { 255,255,0,255 };
	RGBA grayblue = { 128,128,255,255 };
	RGBA green = { 128,224,0,255 };
	RGBA darkgreen = { 0,224,128,255 };
	RGBA brown = { 192,96,0,255 };
	RGBA pink = { 255,168,255,255 };
	RGBA DarkYellow = { 216,216,0,255 };
	RGBA SilverWhite = { 236,236,236,255 };
	RGBA purple = { 144,0,255,255 };
	RGBA Navy = { 88,48,224,255 };
	RGBA skyblue = { 0,136,255,255 };
	RGBA graygreen = { 128,160,128,255 };
	RGBA blue = { 0,96,192,255 };
	RGBA orange = { 255,128,0,255 };
	RGBA peachred = { 255,80,128,255 };
	RGBA reds = { 255,128,192,255 };
	RGBA darkgray = { 96,96,96,255 };
	RGBA Navys = { 0,0,128,255 };
	RGBA darkgreens = { 0,128,0,255 };
	RGBA darkblue = { 0,128,128,255 };
	RGBA redbrown = { 128,0,0,255 };
	RGBA purplered = { 128,0,128,255 };
	RGBA greens = { 0,255,0,255 };
	RGBA envy = { 0,255,255,255 };
	RGBA black = { 0,0,0,255 };
	RGBA gray = { 128,128,128,255 };
	RGBA white = { 255,255,255,255 };
	RGBA blues = { 30,144,255,255 };
	RGBA lightblue = { 135,206,250,160 };
	RGBA Scarlet = { 220, 20, 60, 160 };
	RGBA white_ = { 255,255,255,200 };
	RGBA gray_ = { 128,128,128,200 };
	RGBA black_ = { 0,0,0,200 };
	RGBA red_ = { 255,0,0,200 };
	RGBA Magenta_ = { 255,0,255,200 };
	RGBA yellow_ = { 255,255,0,200 };
	RGBA grayblue_ = { 128,128,255,200 };
	RGBA green_ = { 128,224,0,200 };
	RGBA darkgreen_ = { 0,224,128,200 };
	RGBA brown_ = { 192,96,0,200 };
	RGBA pink_ = { 255,168,255,200 };
	RGBA darkyellow_ = { 216,216,0,200 };
	RGBA silverwhite_ = { 236,236,236,200 };
	RGBA purple_ = { 144,0,255,200 };
	RGBA Blue_ = { 88,48,224,200 };
	RGBA skyblue_ = { 0,136,255,200 };
	RGBA graygreen_ = { 128,160,128,200 };
	RGBA blue_ = { 0,96,192,200 };
	RGBA orange_ = { 255,128,0,200 };
	RGBA pinks_ = { 255,80,128,200 };
	RGBA Fuhong_ = { 255,128,192,200 };
	RGBA darkgray_ = { 96,96,96,200 };
	RGBA Navy_ = { 0,0,128,200 };
	RGBA darkgreens_ = { 0,128,0,200 };
	RGBA darkblue_ = { 0,128,128,200 };
	RGBA redbrown_ = { 128,0,0,200 };
	RGBA purplered_ = { 128,0,128,200 };
	RGBA greens_ = { 0,255,0,200 };
	RGBA envy_ = { 0,255,255,200 };
	RGBA glassblack = { 0, 0, 0, 160 };
	RGBA GlassBlue = { 65,105,225,80 };
	RGBA glassyellow = { 255,255,0,160 };
	RGBA glass = { 200,200,200,60 };
	RGBA Plum = { 221,160,221,160 };

};
Color Col;

bool ShowMenu = true;



WNDPROC Menu_Open;

LRESULT CALLBACK FocusFans(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
	if (msg == WM_KEYUP && (wParam == VK_INSERT || (ShowMenu && wParam == VK_ESCAPE))) {
		ShowMenu = !ShowMenu;
	}

	if (ShowMenu) {
		ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam);
		return TRUE;
	}

	return CallWindowProc(Menu_Open, hWnd, msg, wParam, lParam);
}

ID3D11Device *device = nullptr;
ID3D11DeviceContext *immediateContext = nullptr;
ID3D11RenderTargetView *renderTargetView = nullptr;

HRESULT(*hkresize)(IDXGISwapChain *swapChain, UINT bufferCount, UINT width, UINT height, DXGI_FORMAT newFormat, UINT swapChainFlags) = nullptr;


G ReadFNMemory(DWORD_PTR address, const G& def = G())
{
	return *(G*)address;
}

//menu

// *moans*

void FortniteFocusFans()
{

    int Size = 200;

    if (Settings::FOVSquare == true);
    {
	int x = GetSystemMetrics(SM_CXSCREEN);
	int y = GetSystemMetrics(SM_CYSCREEN);

	DrawRect(Width / 2, Height / 2, Size, &Col.black, 1);	
    }

    if (ShowMenu)
    {
  	ImGui::Begin("##Fortnite",0, nullptr, ImGuiWindowFlags_::NoResize | ImGuiWindowFlags_::NoCollapse);

  	int x = 30;
   	int y = 20;
   	p = ImGui::GetWindowPos();


    	ImGui::Checkbox("Aimbot", &Settings::Aimbot);
    	ImGui::Checkbox("FOV Square", &Settings::FOVSquare);
   	ImGui::Checkbox("ESP", &Settings::Corner_Box_ESP);
    	ImGui::Checkbox("Player Bones", &Settings::Skeleton);
    	ImGui::SliderFloat("Square Size", &Size, 0.f, 200.f);
   }
}

using f_present = HRESULT(__stdcall*)(IDXGISwapChain * pthis, UINT sync_interval, UINT flags);
f_present o_present = nullptr;

HRESULT __stdcall hk_present(IDXGISwapChain* pSwapChain, UINT sync_interval, UINT flags)
{
	if (!device) {
		pSwapChain->GetDevice(__uuidof(device), reinterpret_cast<PVOID*>(&device));
		device->GetImmediateContext(&immediateContext);

		ID3D11Texture2D* renderTarget = nullptr;
		pSwapChain->GetBuffer(0, __uuidof(renderTarget), reinterpret_cast<PVOID*>(&renderTarget));
		device->CreateRenderTargetView(renderTarget, nullptr, &renderTargetView);
		renderTarget->Release();

		ImGui_ImplDX11_Init(FindWindow(0, (L"Fortnite  "), device, immediateContext);
		ImGui_ImplDX11_CreateDeviceObjects();
	}

	immediateContext->OMSetRenderTargets(1, &renderTargetView, nullptr);
	auto& window = BeginScene();

	EndScene(window);

	return o_present(pSwapChain, sync_interval, flags);
}



void SigsInit()
{
  namespace Sigs
  {

  }
}

void OFFSETSHELPER()
{
	DWORD Uworld=0x951B9D0;
	DWORD Levels=0x138;
	DWORD PersistentLevel=0x30;
	DWORD LocalPlayers=0x38;
	DWORD OwningGameInstance=0x180;
	DWORD ControlRotation=0x288;
	DWORD PlayerCameraManager=0x2B8;
	DWORD AcknowledgedPawn=0x2A0;
	DWORD PlayerState=0x240;
	DWORD RootComponent=0x130;
	DWORD Mesh=0x280;
	DWORD RelativeLocation=0x11C;
	DWORD ComponentVelocity=0x140;
	DWORD StaticMesh = 0x478;
	DWORD TeamIndex = 0xE88;
	DWORD PrimaryPickupItemEntry=0x2A8;
	DWORD DisplayName = 0x70;
	DWORD Tier = 0x54;
	DWORD ItemDefinition = 0x18;
	DWORD CurrentWeapon = 0x5C0;
	DWORD WeaponData = 0x378;
}

void OffsetsInit()
{
  namespace Offsets
  {
	Uworld=0x951B9D0;
	Levels=0x138
	PersistentLevel=0x30;
	LocalPlayers=0x38
	OwningGameInstance=0x180;
	ControlRotation=0x288;
	PlayerCameraManager=0x2B8;
	AcknowledgedPawn=0x2A0;
	PlayerState=0x240;
	RootComponent=0x130;
	Mesh=0x280;
	RelativeLocation=0x11C;
	ComponentVelocity=0x140;
	StaticMesh=0x478;
	TeamIndex=0xE88;
	PrimaryPickupItemEntry=0x2A8;
	DisplayName=0x70;
	Tier=0x54;
	ItemDefinition=0x18;
	CurrentWeapon=0x5C0;
	WeaponData=0x378;
  }
}


void ObjectsInit()
{
  namespace Objects
  {

  }
}

void ESPInit()
{
  namespace ESP
  {

  }
}

void Init()
{
    SigsInit();
    OffsetsInit();
    ObjectsInit();
    ESPInit();
    FortniteFocusFans();
}

VOID attach() {

	HWND window = FindWindow(0, _xor_(L"Fortnite  ").c_str());

	IDXGISwapChain      *swapChain    = nullptr;
	ID3D11Device        *device       = nullptr;
	ID3D11DeviceContext *context      = nullptr;
	auto                 featureLevel = D3D_FEATURE_LEVEL_11_0;

	DXGI_SWAP_CHAIN_DESC sd           = { 0 };
	sd.BufferCount                    = 1;
	sd.BufferDesc.Format              = DXGI_FORMAT_R8G8B8A8_UNORM;
	sd.BufferUsage                    = DXGI_USAGE_RENDER_TARGET_OUTPUT;
	sd.Flags                          = DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH;
	sd.OutputWindow                   = window;
	sd.SampleDesc.Count               = 1;
	sd.Windowed                       = TRUE;

	if (FAILED(D3D11CreateDeviceAndSwapChain(nullptr, D3D_DRIVER_TYPE_HARDWARE, 0, 0, &featureLevel, 1, D3D11_SDK_VERSION, &sd, &swapChain, &device, nullptr, &context))) {
		MessageBox(0, _xor_(L"allah says ur black").c_str(), _xor_(L"k").c_str(), MB_ICONERROR);
		return;
	}

	auto table = *reinterpret_cast<PVOID **>(swapChain);

	auto present = table[8];
	auto resize = table[13];

	context->Release();
	device->Release();
	swapChain->Release();

	initialize();

	MH_Initialize();
}

BOOL APIENTRY DllMain(HMODULE module, DWORD reason, LPVOID reserved) {
	if (reason == DLL_PROCESS_ATTACH) {
	    init();
		attach();
	}
	return TRUE;
}
